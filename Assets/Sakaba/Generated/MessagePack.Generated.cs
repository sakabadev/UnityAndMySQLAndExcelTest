// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(8)
            {
                { typeof(global::Sakaba.Domain.StatModifier[]), 0 },
                { typeof(global::Sakaba.Domain.ModTargetType), 1 },
                { typeof(global::Sakaba.Domain.StatModType), 2 },
                { typeof(global::Sakaba.Domain.Item), 3 },
                { typeof(global::Sakaba.Domain.EquipItem), 4 },
                { typeof(global::Sakaba.Domain.ItemTier), 5 },
                { typeof(global::Sakaba.Domain.StatModifier), 6 },
                { typeof(global::Sakaba.Domain.UnitItem), 7 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Sakaba.Domain.StatModifier>();
                case 1: return new MessagePack.Formatters.Sakaba.Domain.ModTargetTypeFormatter();
                case 2: return new MessagePack.Formatters.Sakaba.Domain.StatModTypeFormatter();
                case 3: return new MessagePack.Formatters.Sakaba.Domain.ItemFormatter();
                case 4: return new MessagePack.Formatters.Sakaba.Domain.EquipItemFormatter();
                case 5: return new MessagePack.Formatters.Sakaba.Domain.ItemTierFormatter();
                case 6: return new MessagePack.Formatters.Sakaba.Domain.StatModifierFormatter();
                case 7: return new MessagePack.Formatters.Sakaba.Domain.UnitItemFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Sakaba.Domain
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ModTargetTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sakaba.Domain.ModTargetType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Sakaba.Domain.ModTargetType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Sakaba.Domain.ModTargetType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Sakaba.Domain.ModTargetType)reader.ReadInt32();
        }
    }

    public sealed class StatModTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sakaba.Domain.StatModType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Sakaba.Domain.StatModType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Sakaba.Domain.StatModType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Sakaba.Domain.StatModType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Sakaba.Domain
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class ItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sakaba.Domain.Item>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public ItemFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Sakaba.Domain.UnitItem).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Sakaba.Domain.EquipItem).TypeHandle, new KeyValuePair<int, int>(1, 1) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 1, 1 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sakaba.Domain.Item value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Sakaba.Domain.UnitItem>().Serialize(ref writer, (global::Sakaba.Domain.UnitItem)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Sakaba.Domain.EquipItem>().Serialize(ref writer, (global::Sakaba.Domain.EquipItem)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Sakaba.Domain.Item Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Sakaba.Domain.Item");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Sakaba.Domain.Item result = null;
            switch (key)
            {
                case 0:
                    result = (global::Sakaba.Domain.Item)options.Resolver.GetFormatterWithVerify<global::Sakaba.Domain.UnitItem>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Sakaba.Domain.Item)options.Resolver.GetFormatterWithVerify<global::Sakaba.Domain.EquipItem>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Sakaba.Domain
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class EquipItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sakaba.Domain.EquipItem>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public EquipItemFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "modifiers", 0 },
                { "id", 1 },
                { "name", 2 },
                { "text", 3 },
                { "icon", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("modifiers"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("text"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("icon"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sakaba.Domain.EquipItem value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::Sakaba.Domain.StatModifier[]>().Serialize(ref writer, value.modifiers, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.id, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.text, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.icon, options);
        }

        public global::Sakaba.Domain.EquipItem Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __modifiers__ = default(global::Sakaba.Domain.StatModifier[]);
            var __id__ = default(string);
            var __name__ = default(string);
            var __text__ = default(string);
            var __icon__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __modifiers__ = formatterResolver.GetFormatterWithVerify<global::Sakaba.Domain.StatModifier[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __text__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sakaba.Domain.EquipItem();
            ____result.modifiers = __modifiers__;
            ____result.id = __id__;
            ____result.name = __name__;
            ____result.text = __text__;
            ____result.icon = __icon__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemTierFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sakaba.Domain.ItemTier>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ItemTierFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "id", 0 },
                { "name", 1 },
                { "price", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("price"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sakaba.Domain.ItemTier value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.id, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.price);
        }

        public global::Sakaba.Domain.ItemTier Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __id__ = default(string);
            var __name__ = default(string);
            var __price__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __price__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sakaba.Domain.ItemTier();
            ____result.id = __id__;
            ____result.name = __name__;
            ____result.price = __price__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StatModifierFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sakaba.Domain.StatModifier>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public StatModifierFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "value", 0 },
                { "type", 1 },
                { "targetType", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("value"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("type"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("targetType"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sakaba.Domain.StatModifier value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.value);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Sakaba.Domain.StatModType>().Serialize(ref writer, value.type, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::Sakaba.Domain.ModTargetType>().Serialize(ref writer, value.targetType, options);
        }

        public global::Sakaba.Domain.StatModifier Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __value__ = default(float);
            var __type__ = default(global::Sakaba.Domain.StatModType);
            var __targetType__ = default(global::Sakaba.Domain.ModTargetType);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __value__ = reader.ReadSingle();
                        break;
                    case 1:
                        __type__ = formatterResolver.GetFormatterWithVerify<global::Sakaba.Domain.StatModType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __targetType__ = formatterResolver.GetFormatterWithVerify<global::Sakaba.Domain.ModTargetType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sakaba.Domain.StatModifier();
            ____result.value = __value__;
            ____result.type = __type__;
            ____result.targetType = __targetType__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UnitItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sakaba.Domain.UnitItem>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public UnitItemFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "hp", 0 },
                { "attack", 1 },
                { "id", 2 },
                { "name", 3 },
                { "text", 4 },
                { "icon", 5 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("hp"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("attack"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("text"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("icon"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sakaba.Domain.UnitItem value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.hp);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.attack);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.id, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.text, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.icon, options);
        }

        public global::Sakaba.Domain.UnitItem Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __hp__ = default(int);
            var __attack__ = default(int);
            var __id__ = default(string);
            var __name__ = default(string);
            var __text__ = default(string);
            var __icon__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __hp__ = reader.ReadInt32();
                        break;
                    case 1:
                        __attack__ = reader.ReadInt32();
                        break;
                    case 2:
                        __id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __text__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __icon__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sakaba.Domain.UnitItem();
            ____result.hp = __hp__;
            ____result.attack = __attack__;
            ____result.id = __id__;
            ____result.name = __name__;
            ____result.text = __text__;
            ____result.icon = __icon__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

